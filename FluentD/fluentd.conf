<source>
  @type http
  port 9880
  bind 0.0.0.0
  body_size_limit 32m
  keepalive_timeout 10s
</source>

<source>
  @type http
  port 9881
  bind 0.0.0.0
  body_size_limit 32m
  keepalive_timeout 10s
</source>

# Input section for Microservice 3
<source>
  @type http
  port 9882
  bind 0.0.0.0
  body_size_limit 32m
  keepalive_timeout 10s
</source>

# Add host parameter and create initial tag based on message_type
<filter script-*.log>
  @type record_transformer
  <record>
    host_param "#{Socket.gethostname}"
    message_type_tag ${record['message_type'] == 'LOG' ? 'log' : record['message_type'] == 'HEARTBEAT' ? 'heartbeat' : record['message_type'] == 'REGISTRATION' ? 'registration' : 'unknown'}
  </record>
</filter>

# First division based on message_type
<match script-*.log>
  @type rewrite_tag_filter
  <rule>
    key message_type
    pattern /^LOG$/
    tag log.${tag}
  </rule>
  <rule>
    key message_type
    pattern /^HEARTBEAT$/
    tag heartbeat.${tag}
  </rule>
  <rule>
    key message_type
    pattern /^REGISTRATION$/
    tag registration.${tag}
  </rule>
</match>

# For LOG messages, add log level tag
<filter log.**>
  @type record_transformer
  <record>
    log_level_tag ${record['log_level'] == 'INFO' ? 'INFO' : record['log_level'] == 'WARN' ? 'WARN' : record['log_level'] == 'ERROR' ? 'ERROR' : 'unknown'}
  </record>
</filter>

# Divide LOG messages based on log level
<match log.**>
  @type rewrite_tag_filter
  <rule>
    key log_level
    pattern /^INFO$/
    tag info.${tag}
  </rule>
  <rule>
    key log_level
    pattern /^ERROR$/
    tag error.${tag}
  </rule>
  <rule>
    key log_level
    pattern /^WARN$/
    tag warn.${tag}
  </rule>
</match>

# Handle HEARTBEAT messages
<match heartbeat.**>
  @type kafka2
  brokers 192.168.83.128:9092
  topic_key heartbeat_logs
  default_topic heartbeat_logs
  
  <format>
    @type json
  </format>
  <buffer>
    @type memory
    flush_interval 5s
    retry_max_times 5
    retry_wait 1
  </buffer>
  
  max_send_retries 5
  required_acks -1
</match>

# Handle REGISTRATION messages
<match registration.**>
  @type kafka2
  brokers 192.168.83.128:9092
  topic_key registration_logs
  default_topic registration_logs
  
  <format>
    @type json
  </format>
  <buffer>
    @type memory
    flush_interval 5s
    retry_max_times 5
    retry_wait 1
  </buffer>
  
  max_send_retries 5
  required_acks -1
</match>

# Handle INFO logs
<match info.**>
  @type kafka2
  brokers 192.168.83.128:9092
  topic_key info_logs
  default_topic info_logs
  
  <format>
    @type json
  </format>
  <buffer>
    @type memory
    flush_interval 5s
    retry_max_times 5
    retry_wait 1
  </buffer>
  
  max_send_retries 5
  required_acks -1
</match>

# Handle ERROR logs
<match error.**>
  @type kafka2
  brokers 192.168.83.128:9092
  topic_key error_logs
  default_topic error_logs
  
  <format>
    @type json
  </format>
  <buffer>
    @type memory
    flush_interval 5s
    retry_max_times 5
    retry_wait 1
  </buffer>
  
  max_send_retries 5
  required_acks -1
</match>

# Handle WARN logs
<match warn.**>
  @type kafka2
  brokers 192.168.83.128:9092
  topic_key warn_logs
  default_topic warn_logs
  
  <format>
    @type json
  </format>
  <buffer>
    @type memory
    flush_interval 5s
    retry_max_times 5
    retry_wait 1
  </buffer>
  
  max_send_retries 5
  required_acks -1
</match>
